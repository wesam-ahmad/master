{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isHtml = exports.cloneDom = exports.domEach = exports.cssCase = exports.camelCase = exports.isCheerio = exports.isTag = void 0;\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - The DOM node to check.\n * @returns Whether the node is a tag.\n */\nvar domhandler_2 = require(\"domhandler\");\nObject.defineProperty(exports, \"isTag\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_2.isTag;\n  }\n});\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\nfunction isCheerio(maybeCheerio) {\n  return maybeCheerio.cheerio != null;\n}\nexports.isCheerio = isCheerio;\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in camel case notation.\n */\nfunction camelCase(str) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n    return x.toUpperCase();\n  });\n}\nexports.camelCase = camelCase;\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in \"CSS case\".\n */\nfunction cssCase(str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\nexports.cssCase = cssCase;\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - The array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\nfunction domEach(array, fn) {\n  var len = array.length;\n  for (var i = 0; i < len; i++) fn(array[i], i);\n  return array;\n}\nexports.domEach = domEach;\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The domhandler-compliant DOM structure.\n * @returns - The cloned DOM.\n */\nfunction cloneDom(dom) {\n  var clone = 'length' in dom ? Array.prototype.map.call(dom, function (el) {\n    return (0, domhandler_1.cloneNode)(el, true);\n  }) : [(0, domhandler_1.cloneNode)(dom, true)];\n  // Add a root node around the cloned nodes\n  var root = new domhandler_1.Document(clone);\n  clone.forEach(function (node) {\n    node.parent = root;\n  });\n  return clone;\n}\nexports.cloneDom = cloneDom;\nvar CharacterCodes;\n(function (CharacterCodes) {\n  CharacterCodes[CharacterCodes[\"LowerA\"] = 97] = \"LowerA\";\n  CharacterCodes[CharacterCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n  CharacterCodes[CharacterCodes[\"UpperA\"] = 65] = \"UpperA\";\n  CharacterCodes[CharacterCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n  CharacterCodes[CharacterCodes[\"Exclamation\"] = 33] = \"Exclamation\";\n})(CharacterCodes || (CharacterCodes = {}));\n/**\n * Check if string is HTML.\n *\n * Tests for a `<` within a string, immediate followed by a letter and\n * eventually followed by a `>`.\n *\n * @private\n * @category Utils\n * @param str - The string to check.\n * @returns Indicates if `str` is HTML.\n */\nfunction isHtml(str) {\n  var tagStart = str.indexOf('<');\n  if (tagStart < 0 || tagStart > str.length - 3) return false;\n  var tagChar = str.charCodeAt(tagStart + 1);\n  return (tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ || tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ || tagChar === CharacterCodes.Exclamation) && str.includes('>', tagStart + 2);\n}\nexports.isHtml = isHtml;","map":{"version":3,"names":["Object","defineProperty","exports","value","isHtml","cloneDom","domEach","cssCase","camelCase","isCheerio","isTag","domhandler_1","require","domhandler_2","enumerable","get","maybeCheerio","cheerio","str","replace","_","x","toUpperCase","toLowerCase","array","fn","len","length","i","dom","clone","Array","prototype","map","call","el","cloneNode","root","Document","forEach","node","parent","CharacterCodes","tagStart","indexOf","tagChar","charCodeAt","LowerA","LowerZ","UpperA","UpperZ","Exclamation","includes"],"sources":["C:/Users/Orange/Desktop/react_project/dressrental/node_modules/cheerio/lib/utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isHtml = exports.cloneDom = exports.domEach = exports.cssCase = exports.camelCase = exports.isCheerio = exports.isTag = void 0;\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - The DOM node to check.\n * @returns Whether the node is a tag.\n */\nvar domhandler_2 = require(\"domhandler\");\nObject.defineProperty(exports, \"isTag\", { enumerable: true, get: function () { return domhandler_2.isTag; } });\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\nfunction isCheerio(maybeCheerio) {\n    return maybeCheerio.cheerio != null;\n}\nexports.isCheerio = isCheerio;\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in camel case notation.\n */\nfunction camelCase(str) {\n    return str.replace(/[_.-](\\w|$)/g, function (_, x) { return x.toUpperCase(); });\n}\nexports.camelCase = camelCase;\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - The string to be converted.\n * @returns String in \"CSS case\".\n */\nfunction cssCase(str) {\n    return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\nexports.cssCase = cssCase;\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - The array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\nfunction domEach(array, fn) {\n    var len = array.length;\n    for (var i = 0; i < len; i++)\n        fn(array[i], i);\n    return array;\n}\nexports.domEach = domEach;\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The domhandler-compliant DOM structure.\n * @returns - The cloned DOM.\n */\nfunction cloneDom(dom) {\n    var clone = 'length' in dom\n        ? Array.prototype.map.call(dom, function (el) { return (0, domhandler_1.cloneNode)(el, true); })\n        : [(0, domhandler_1.cloneNode)(dom, true)];\n    // Add a root node around the cloned nodes\n    var root = new domhandler_1.Document(clone);\n    clone.forEach(function (node) {\n        node.parent = root;\n    });\n    return clone;\n}\nexports.cloneDom = cloneDom;\nvar CharacterCodes;\n(function (CharacterCodes) {\n    CharacterCodes[CharacterCodes[\"LowerA\"] = 97] = \"LowerA\";\n    CharacterCodes[CharacterCodes[\"LowerZ\"] = 122] = \"LowerZ\";\n    CharacterCodes[CharacterCodes[\"UpperA\"] = 65] = \"UpperA\";\n    CharacterCodes[CharacterCodes[\"UpperZ\"] = 90] = \"UpperZ\";\n    CharacterCodes[CharacterCodes[\"Exclamation\"] = 33] = \"Exclamation\";\n})(CharacterCodes || (CharacterCodes = {}));\n/**\n * Check if string is HTML.\n *\n * Tests for a `<` within a string, immediate followed by a letter and\n * eventually followed by a `>`.\n *\n * @private\n * @category Utils\n * @param str - The string to check.\n * @returns Indicates if `str` is HTML.\n */\nfunction isHtml(str) {\n    var tagStart = str.indexOf('<');\n    if (tagStart < 0 || tagStart > str.length - 3)\n        return false;\n    var tagChar = str.charCodeAt(tagStart + 1);\n    return (((tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ) ||\n        (tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ) ||\n        tagChar === CharacterCodes.Exclamation) &&\n        str.includes('>', tagStart + 2));\n}\nexports.isHtml = isHtml;\n//# sourceMappingURL=utils.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}