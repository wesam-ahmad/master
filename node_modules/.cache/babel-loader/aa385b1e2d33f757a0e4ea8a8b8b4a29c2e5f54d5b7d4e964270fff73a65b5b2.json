{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.update = exports.getParse = void 0;\nvar domutils_1 = require(\"domutils\");\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Get the parse function with options.\n *\n * @param parser - The parser function.\n * @returns The parse function with options.\n */\nfunction getParse(parser) {\n  /**\n   * Parse a HTML string or a node.\n   *\n   * @param content - The HTML string or node.\n   * @param options - The parser options.\n   * @param isDocument - If `content` is a document.\n   * @param context - The context node in the DOM tree.\n   * @returns The parsed document node.\n   */\n  return function parse(content, options, isDocument, context) {\n    if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n      content = content.toString();\n    }\n    if (typeof content === 'string') {\n      return parser(content, options, isDocument, context);\n    }\n    var doc = content;\n    if (!Array.isArray(doc) && (0, domhandler_1.isDocument)(doc)) {\n      // If `doc` is already a root, just return it\n      return doc;\n    }\n    // Add conent to new root element\n    var root = new domhandler_1.Document([]);\n    // Update the DOM using the root\n    update(doc, root);\n    return root;\n  };\n}\nexports.getParse = getParse;\n/**\n * Update the dom structure, for one changed layer.\n *\n * @param newChilds - The new children.\n * @param parent - The new parent.\n * @returns The parent node.\n */\nfunction update(newChilds, parent) {\n  // Normalize\n  var arr = Array.isArray(newChilds) ? newChilds : [newChilds];\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n    // Cleanly remove existing nodes from their previous structures.\n    if (node.parent && node.parent.children !== arr) {\n      (0, domutils_1.removeElement)(node);\n    }\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n    node.parent = parent;\n  }\n  return parent;\n}\nexports.update = update;","map":{"version":3,"names":["Object","defineProperty","exports","value","update","getParse","domutils_1","require","domhandler_1","parser","parse","content","options","isDocument","context","Buffer","isBuffer","toString","doc","Array","isArray","root","Document","newChilds","parent","arr","children","i","length","node","removeElement","prev","next"],"sources":["C:/Users/Orange/Desktop/react_project/dressrental/node_modules/cheerio/lib/parse.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.update = exports.getParse = void 0;\nvar domutils_1 = require(\"domutils\");\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Get the parse function with options.\n *\n * @param parser - The parser function.\n * @returns The parse function with options.\n */\nfunction getParse(parser) {\n    /**\n     * Parse a HTML string or a node.\n     *\n     * @param content - The HTML string or node.\n     * @param options - The parser options.\n     * @param isDocument - If `content` is a document.\n     * @param context - The context node in the DOM tree.\n     * @returns The parsed document node.\n     */\n    return function parse(content, options, isDocument, context) {\n        if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n            content = content.toString();\n        }\n        if (typeof content === 'string') {\n            return parser(content, options, isDocument, context);\n        }\n        var doc = content;\n        if (!Array.isArray(doc) && (0, domhandler_1.isDocument)(doc)) {\n            // If `doc` is already a root, just return it\n            return doc;\n        }\n        // Add conent to new root element\n        var root = new domhandler_1.Document([]);\n        // Update the DOM using the root\n        update(doc, root);\n        return root;\n    };\n}\nexports.getParse = getParse;\n/**\n * Update the dom structure, for one changed layer.\n *\n * @param newChilds - The new children.\n * @param parent - The new parent.\n * @returns The parent node.\n */\nfunction update(newChilds, parent) {\n    // Normalize\n    var arr = Array.isArray(newChilds) ? newChilds : [newChilds];\n    // Update parent\n    if (parent) {\n        parent.children = arr;\n    }\n    else {\n        parent = null;\n    }\n    // Update neighbors\n    for (var i = 0; i < arr.length; i++) {\n        var node = arr[i];\n        // Cleanly remove existing nodes from their previous structures.\n        if (node.parent && node.parent.children !== arr) {\n            (0, domutils_1.removeElement)(node);\n        }\n        if (parent) {\n            node.prev = arr[i - 1] || null;\n            node.next = arr[i + 1] || null;\n        }\n        else {\n            node.prev = node.next = null;\n        }\n        node.parent = parent;\n    }\n    return parent;\n}\nexports.update = update;\n//# sourceMappingURL=parse.js.map"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,MAAM,GAAGF,OAAO,CAACG,QAAQ,GAAG,KAAK,CAAC;AAC1C,IAAIC,UAAU,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,IAAIC,YAAY,GAAGD,OAAO,CAAC,YAAY,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,QAAQA,CAACI,MAAM,EAAE;EACtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,OAAO,SAASC,KAAKA,CAACC,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAEC,OAAO,EAAE;IACzD,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,QAAQ,CAACL,OAAO,CAAC,EAAE;MAC3DA,OAAO,GAAGA,OAAO,CAACM,QAAQ,CAAC,CAAC;IAChC;IACA,IAAI,OAAON,OAAO,KAAK,QAAQ,EAAE;MAC7B,OAAOF,MAAM,CAACE,OAAO,EAAEC,OAAO,EAAEC,UAAU,EAAEC,OAAO,CAAC;IACxD;IACA,IAAII,GAAG,GAAGP,OAAO;IACjB,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACF,GAAG,CAAC,IAAI,CAAC,CAAC,EAAEV,YAAY,CAACK,UAAU,EAAEK,GAAG,CAAC,EAAE;MAC1D;MACA,OAAOA,GAAG;IACd;IACA;IACA,IAAIG,IAAI,GAAG,IAAIb,YAAY,CAACc,QAAQ,CAAC,EAAE,CAAC;IACxC;IACAlB,MAAM,CAACc,GAAG,EAAEG,IAAI,CAAC;IACjB,OAAOA,IAAI;EACf,CAAC;AACL;AACAnB,OAAO,CAACG,QAAQ,GAAGA,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,MAAMA,CAACmB,SAAS,EAAEC,MAAM,EAAE;EAC/B;EACA,IAAIC,GAAG,GAAGN,KAAK,CAACC,OAAO,CAACG,SAAS,CAAC,GAAGA,SAAS,GAAG,CAACA,SAAS,CAAC;EAC5D;EACA,IAAIC,MAAM,EAAE;IACRA,MAAM,CAACE,QAAQ,GAAGD,GAAG;EACzB,CAAC,MACI;IACDD,MAAM,GAAG,IAAI;EACjB;EACA;EACA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IACjC,IAAIE,IAAI,GAAGJ,GAAG,CAACE,CAAC,CAAC;IACjB;IACA,IAAIE,IAAI,CAACL,MAAM,IAAIK,IAAI,CAACL,MAAM,CAACE,QAAQ,KAAKD,GAAG,EAAE;MAC7C,CAAC,CAAC,EAAEnB,UAAU,CAACwB,aAAa,EAAED,IAAI,CAAC;IACvC;IACA,IAAIL,MAAM,EAAE;MACRK,IAAI,CAACE,IAAI,GAAGN,GAAG,CAACE,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI;MAC9BE,IAAI,CAACG,IAAI,GAAGP,GAAG,CAACE,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI;IAClC,CAAC,MACI;MACDE,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACG,IAAI,GAAG,IAAI;IAChC;IACAH,IAAI,CAACL,MAAM,GAAGA,MAAM;EACxB;EACA,OAAOA,MAAM;AACjB;AACAtB,OAAO,CAACE,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}